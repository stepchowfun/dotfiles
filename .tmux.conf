#####################
### MISC SETTINGS ###
#####################

# Keep a lot of history.
set -g history-limit 64000

# Don't rename windows automatically.
set -g allow-rename off

# In macOS, use the user login context instead of the startup context. This
# enables programs like `open` to work.
if-shell "uname | grep -qi Darwin" 'set -g default-command "reattach-to-user-namespace -l ${SHELL}"'

# When text is selected in copy mode, copy it to the clipboard. This is the
# default behavior, but it doesn't seem to work in Alacritty on macOS. So we
# manually override these keybindings in macOS to use pbcopy.
if-shell "uname | grep -qi Darwin" "bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'"
if-shell "uname | grep -qi Darwin" "bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'"

####################
### KEY BINDINGS ###
####################

# Set vi mode.
set-window-option -g mode-keys vi

# Don't use Escape as a Meta key.
set -sg escape-time 0

# Remap prefix from 'C-b' to `.
unbind C-b
set -g prefix `
bind ` send-prefix

# Split panes using Prefix + | and Prefix + -.
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Resize panes with M-arrows (1 cell at a time) and C-arrows (10 cells at a time).
bind -n M-Left resize-pane -L
bind -n M-Down resize-pane -D
bind -n M-Up resize-pane -U
bind -n M-Right resize-pane -R
bind -n C-Left resize-pane -L 10
bind -n C-Down resize-pane -D 10
bind -n C-Up resize-pane -U 10
bind -n C-Right resize-pane -R 10

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Kill panes with Prefix + Backspace.
bind BSpace confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Switch windows using M-h/j/k/l.
bind -n M-h previous-window
bind -n M-l next-window

# Create and kill windows with M-k and M-j, respectively.
bind -n M-k new-window -c "#{pane_current_path}"
bind -n M-j confirm-before -p "kill-window #W? (y/n)" kill-window

# Move windows using Shift-arrows.
bind -n S-Left swap-window -t -1
bind -n S-Right swap-window -t +1

# Enable mouse mode.
set -g mouse on

##############
### DESIGN ###
##############

# Support 256 colors
set -g default-terminal "screen-256color"

# Status bar
set -g status-bg colour19
set -g status-left ''
set -g status-right '#[fg=colour18,bg=colour21,bold] %m/%d/%Y %l:%M %p '

# Active window tab
setw -g window-status-current-style bg=colour4,fg=colour18,bold
setw -g window-status-current-format ' #W '

# Inactive window tab
setw -g window-status-style bg=colour21,fg=colour18,bold
setw -g window-status-format ' #W '

# Pane borders
setw -g pane-border-style bg=colour18,fg=colour19
setw -g pane-active-border-style bg=colour19,fg=colour19

# Use a lighter background color for inactive panes.
set -g window-style fg=colour21,bg=colour18
set -g window-active-style fg=colour7,bg=colour0
